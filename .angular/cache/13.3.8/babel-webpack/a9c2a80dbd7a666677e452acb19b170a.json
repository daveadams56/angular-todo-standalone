{"ast":null,"code":"import _asyncToGenerator from \"/Users/david.adams/Checkouts/angular-sample-standalone/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*\n * angular-todo-prototype\n *\n * app.component.ts\n *\n * Copyright (c) 2021 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component } from '@angular/core';\nimport { Config, UserManager } from '@forgerock/javascript-sdk';\nimport { environment } from '../environments/environment';\nimport { NavigationCancel, NavigationEnd, NavigationError, NavigationStart } from '@angular/router';\nimport { filter } from 'rxjs';\nlet AppComponent = class AppComponent {\n  constructor(userService, router) {\n    this.userService = userService;\n    this.title = 'angular-todo-prototype';\n    this.loading = false;\n    const navStart = router.events.pipe(filter(evt => evt instanceof NavigationStart));\n    const navEnd = router.events.pipe(filter(evt => evt instanceof NavigationEnd || evt instanceof NavigationCancel || evt instanceof NavigationError));\n    navStart.subscribe(() => this.loading = true);\n    navEnd.subscribe(() => this.loading = false);\n  }\n  /**\n   * Initialise the SDK and try to load the user when the app loads\n   */\n\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      /** ***************************************************************************\n       * SDK INTEGRATION POINT\n       * Summary: Configure the SDK\n       * ----------------------------------------------------------------------------\n       * Details: Below, you will see the following settings:\n       * - clientId: (OAuth2 only) this is the OAuth2 client you created in ForgeRock\n       * - redirectUri: (OAuth2 only) this is the URI/URL of this app too which the\n       *   OAuth flow will redirect\n       * - scope: (OAuth2 only) these are the OAuth scopes that you will request from\n       *   ForgeRock\n       * - serverConfig: this includes the baseUrl of your ForgeRock AM, should\n       *   include `/am/` at the end\n       * - realmPath: this is the realm you are wanting to use within ForgeRock\n       * - tree: The authentication journey/tree that you are wanting to use\n       *************************************************************************** */\n      Config.set({\n        clientId: environment.WEB_OAUTH_CLIENT,\n        redirectUri: environment.APP_URL,\n        scope: 'openid profile email',\n        serverConfig: {\n          baseUrl: environment.AM_URL,\n          timeout: 3000 // 90000 or less\n\n        },\n        realmPath: environment.REALM_PATH,\n        tree: environment.JOURNEY_LOGIN\n      });\n      /** *****************************************************************\n       * SDK INTEGRATION POINT\n       * Summary: Optional client-side route access validation\n       * ------------------------------------------------------------------\n       * Details: Here, you could just make sure tokens exist –\n       * TokenStorage.get() – or, validate tokens, renew expiry timers,\n       * session checks ... Below, we are calling the userinfo endpoint to\n       * ensure valid tokens before continuing, but it's optional.\n       ***************************************************************** */\n\n      try {\n        // Assume user is likely authenticated if there are tokens\n        const info = yield UserManager.getCurrentUser();\n        _this.userService.isAuthenticated = true;\n        _this.userService.info = info;\n      } catch (err) {\n        // User likely not authenticated\n        console.log(err);\n      }\n    })();\n  }\n\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html'\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"sources":["/Users/david.adams/Checkouts/angular-sample-standalone/src/app/app.component.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","Component","Config","UserManager","environment","NavigationCancel","NavigationEnd","NavigationError","NavigationStart","filter","AppComponent","constructor","userService","router","title","loading","navStart","events","pipe","evt","navEnd","subscribe","ngOnInit","set","clientId","WEB_OAUTH_CLIENT","redirectUri","APP_URL","scope","serverConfig","baseUrl","AM_URL","timeout","realmPath","REALM_PATH","tree","JOURNEY_LOGIN","info","getCurrentUser","isAuthenticated","err","console","log","selector","templateUrl"],"mappings":"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","sourcesContent":["/*\n * angular-todo-prototype\n *\n * app.component.ts\n *\n * Copyright (c) 2021 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from '@angular/core';\nimport { Config, UserManager } from '@forgerock/javascript-sdk';\nimport { environment } from '../environments/environment';\nimport { NavigationCancel, NavigationEnd, NavigationError, NavigationStart, } from '@angular/router';\nimport { filter } from 'rxjs';\nlet AppComponent = class AppComponent {\n    constructor(userService, router) {\n        this.userService = userService;\n        this.title = 'angular-todo-prototype';\n        this.loading = false;\n        const navStart = router.events.pipe(filter((evt) => evt instanceof NavigationStart));\n        const navEnd = router.events.pipe(filter((evt) => evt instanceof NavigationEnd ||\n            evt instanceof NavigationCancel ||\n            evt instanceof NavigationError));\n        navStart.subscribe(() => (this.loading = true));\n        navEnd.subscribe(() => (this.loading = false));\n    }\n    /**\n     * Initialise the SDK and try to load the user when the app loads\n     */\n    async ngOnInit() {\n        /** ***************************************************************************\n         * SDK INTEGRATION POINT\n         * Summary: Configure the SDK\n         * ----------------------------------------------------------------------------\n         * Details: Below, you will see the following settings:\n         * - clientId: (OAuth2 only) this is the OAuth2 client you created in ForgeRock\n         * - redirectUri: (OAuth2 only) this is the URI/URL of this app too which the\n         *   OAuth flow will redirect\n         * - scope: (OAuth2 only) these are the OAuth scopes that you will request from\n         *   ForgeRock\n         * - serverConfig: this includes the baseUrl of your ForgeRock AM, should\n         *   include `/am/` at the end\n         * - realmPath: this is the realm you are wanting to use within ForgeRock\n         * - tree: The authentication journey/tree that you are wanting to use\n         *************************************************************************** */\n        Config.set({\n            clientId: environment.WEB_OAUTH_CLIENT,\n            redirectUri: environment.APP_URL,\n            scope: 'openid profile email',\n            serverConfig: {\n                baseUrl: environment.AM_URL,\n                timeout: 3000, // 90000 or less\n            },\n            realmPath: environment.REALM_PATH,\n            tree: environment.JOURNEY_LOGIN,\n        });\n        /** *****************************************************************\n         * SDK INTEGRATION POINT\n         * Summary: Optional client-side route access validation\n         * ------------------------------------------------------------------\n         * Details: Here, you could just make sure tokens exist –\n         * TokenStorage.get() – or, validate tokens, renew expiry timers,\n         * session checks ... Below, we are calling the userinfo endpoint to\n         * ensure valid tokens before continuing, but it's optional.\n         ***************************************************************** */\n        try {\n            // Assume user is likely authenticated if there are tokens\n            const info = await UserManager.getCurrentUser();\n            this.userService.isAuthenticated = true;\n            this.userService.info = info;\n        }\n        catch (err) {\n            // User likely not authenticated\n            console.log(err);\n        }\n    }\n};\nAppComponent = __decorate([\n    Component({\n        selector: 'app-root',\n        templateUrl: './app.component.html',\n    })\n], AppComponent);\nexport { AppComponent };\n"]},"metadata":{},"sourceType":"module"}