{"ast":null,"code":"import _asyncToGenerator from \"/Users/david.adams/Checkouts/angular-sample-standalone/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*\n * angular-todo-prototype\n *\n * auth.guard.ts\n *\n * Copyright (c) 2021 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Injectable } from '@angular/core';\nimport { TokenStorage, UserManager } from '@forgerock/javascript-sdk';\nlet AuthGuard = class AuthGuard {\n  constructor(userService, router) {\n    this.userService = userService;\n    this.router = router;\n  }\n  /**\n   * Extends CanActivate to protect selected routes from unauthenticated access\n   *\n   * @param next - Route that the user is trying to access\n   * @param state - Router state\n   * @returns Promise - Boolean or route to redirect the user to\n   */\n\n\n  canActivate(next, state) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const loginUrl = _this.router.parseUrl('/login');\n\n      try {\n        // Assume user is likely authenticated if there are tokens\n\n        /** *****************************************************************\n         * SDK INTEGRATION POINT\n         * Summary: Optional client-side route access validation\n         * ------------------------------------------------------------------\n         * Details: Here, we make sure tokens exist using TokenStorage.get()\n         * however there are other checks – validate tokens, session checks..\n         * In this case, we are calling the userinfo endpoint to\n         * ensure valid tokens before continuing, but it's optional.\n         ***************************************************************** */\n        const tokens = yield TokenStorage.get();\n        const info = yield UserManager.getCurrentUser();\n\n        if (tokens === undefined || info === undefined) {\n          return loginUrl;\n        }\n\n        return true;\n      } catch (err) {\n        // User likely not authenticated\n        console.log(err);\n        return loginUrl;\n      }\n    })();\n  }\n\n};\nAuthGuard = __decorate([Injectable({\n  providedIn: 'root'\n})], AuthGuard);\nexport { AuthGuard };","map":{"version":3,"sources":["/Users/david.adams/Checkouts/angular-sample-standalone/src/app/auth/auth.guard.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","Injectable","TokenStorage","UserManager","AuthGuard","constructor","userService","router","canActivate","next","state","loginUrl","parseUrl","tokens","get","info","getCurrentUser","undefined","err","console","log","providedIn"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,UAAU,GAAI,QAAQ,KAAKA,UAAd,IAA6B,UAAUC,UAAV,EAAsBC,MAAtB,EAA8BC,GAA9B,EAAmCC,IAAnC,EAAyC;AACnF,MAAIC,CAAC,GAAGC,SAAS,CAACC,MAAlB;AAAA,MAA0BC,CAAC,GAAGH,CAAC,GAAG,CAAJ,GAAQH,MAAR,GAAiBE,IAAI,KAAK,IAAT,GAAgBA,IAAI,GAAGK,MAAM,CAACC,wBAAP,CAAgCR,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AAAA,MAA2HO,CAA3H;AACA,MAAI,OAAOC,OAAP,KAAmB,QAAnB,IAA+B,OAAOA,OAAO,CAACC,QAAf,KAA4B,UAA/D,EAA2EL,CAAC,GAAGI,OAAO,CAACC,QAAR,CAAiBZ,UAAjB,EAA6BC,MAA7B,EAAqCC,GAArC,EAA0CC,IAA1C,CAAJ,CAA3E,KACK,KAAK,IAAIU,CAAC,GAAGb,UAAU,CAACM,MAAX,GAAoB,CAAjC,EAAoCO,CAAC,IAAI,CAAzC,EAA4CA,CAAC,EAA7C,EAAiD,IAAIH,CAAC,GAAGV,UAAU,CAACa,CAAD,CAAlB,EAAuBN,CAAC,GAAG,CAACH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACH,CAAD,CAAT,GAAeH,CAAC,GAAG,CAAJ,GAAQM,CAAC,CAACT,MAAD,EAASC,GAAT,EAAcK,CAAd,CAAT,GAA4BG,CAAC,CAACT,MAAD,EAASC,GAAT,CAA7C,KAA+DK,CAAnE;AAC7E,SAAOH,CAAC,GAAG,CAAJ,IAASG,CAAT,IAAcC,MAAM,CAACM,cAAP,CAAsBb,MAAtB,EAA8BC,GAA9B,EAAmCK,CAAnC,CAAd,EAAqDA,CAA5D;AACH,CALD;;AAMA,SAASQ,UAAT,QAA2B,eAA3B;AACA,SAASC,YAAT,EAAuBC,WAAvB,QAA0C,2BAA1C;AACA,IAAIC,SAAS,GAAG,MAAMA,SAAN,CAAgB;AAC5BC,EAAAA,WAAW,CAACC,WAAD,EAAcC,MAAd,EAAsB;AAC7B,SAAKD,WAAL,GAAmBA,WAAnB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACUC,EAAAA,WAAW,CAACC,IAAD,EAAOC,KAAP,EAAc;AAAA;;AAAA;AAC3B,YAAMC,QAAQ,GAAG,KAAI,CAACJ,MAAL,CAAYK,QAAZ,CAAqB,QAArB,CAAjB;;AACA,UAAI;AACA;;AACA;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,cAAMC,MAAM,SAASX,YAAY,CAACY,GAAb,EAArB;AACA,cAAMC,IAAI,SAASZ,WAAW,CAACa,cAAZ,EAAnB;;AACA,YAAIH,MAAM,KAAKI,SAAX,IAAwBF,IAAI,KAAKE,SAArC,EAAgD;AAC5C,iBAAON,QAAP;AACH;;AACD,eAAO,IAAP;AACH,OAjBD,CAkBA,OAAOO,GAAP,EAAY;AACR;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,eAAOP,QAAP;AACH;AAxB0B;AAyB9B;;AArC2B,CAAhC;AAuCAP,SAAS,GAAGnB,UAAU,CAAC,CACnBgB,UAAU,CAAC;AACPoB,EAAAA,UAAU,EAAE;AADL,CAAD,CADS,CAAD,EAInBjB,SAJmB,CAAtB;AAKA,SAASA,SAAT","sourcesContent":["/*\n * angular-todo-prototype\n *\n * auth.guard.ts\n *\n * Copyright (c) 2021 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Injectable } from '@angular/core';\nimport { TokenStorage, UserManager } from '@forgerock/javascript-sdk';\nlet AuthGuard = class AuthGuard {\n    constructor(userService, router) {\n        this.userService = userService;\n        this.router = router;\n    }\n    /**\n     * Extends CanActivate to protect selected routes from unauthenticated access\n     *\n     * @param next - Route that the user is trying to access\n     * @param state - Router state\n     * @returns Promise - Boolean or route to redirect the user to\n     */\n    async canActivate(next, state) {\n        const loginUrl = this.router.parseUrl('/login');\n        try {\n            // Assume user is likely authenticated if there are tokens\n            /** *****************************************************************\n             * SDK INTEGRATION POINT\n             * Summary: Optional client-side route access validation\n             * ------------------------------------------------------------------\n             * Details: Here, we make sure tokens exist using TokenStorage.get()\n             * however there are other checks – validate tokens, session checks..\n             * In this case, we are calling the userinfo endpoint to\n             * ensure valid tokens before continuing, but it's optional.\n             ***************************************************************** */\n            const tokens = await TokenStorage.get();\n            const info = await UserManager.getCurrentUser();\n            if (tokens === undefined || info === undefined) {\n                return loginUrl;\n            }\n            return true;\n        }\n        catch (err) {\n            // User likely not authenticated\n            console.log(err);\n            return loginUrl;\n        }\n    }\n};\nAuthGuard = __decorate([\n    Injectable({\n        providedIn: 'root',\n    })\n], AuthGuard);\nexport { AuthGuard };\n"]},"metadata":{},"sourceType":"module"}