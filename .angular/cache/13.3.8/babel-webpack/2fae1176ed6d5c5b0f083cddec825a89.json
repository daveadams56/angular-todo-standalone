{"ast":null,"code":"import _asyncToGenerator from \"/Users/david.adams/Checkouts/angular-sample-standalone/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Config, UserManager } from '@forgerock/javascript-sdk';\nimport { environment } from '../environments/environment';\nimport { NavigationCancel, NavigationEnd, NavigationError, NavigationStart } from '@angular/router';\nimport { filter } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/user.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"./utilities/loading/loading.component\";\n\nfunction AppComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"div\", 3);\n    i0.ɵɵelement(2, \"app-loading\", 4);\n    i0.ɵɵelementEnd()();\n  }\n}\n\nexport class AppComponent {\n  constructor(userService, router) {\n    this.userService = userService;\n    this.title = 'angular-todo-prototype';\n    this.loading = false;\n    const navStart = router.events.pipe(filter(evt => evt instanceof NavigationStart));\n    const navEnd = router.events.pipe(filter(evt => evt instanceof NavigationEnd || evt instanceof NavigationCancel || evt instanceof NavigationError));\n    navStart.subscribe(() => this.loading = true);\n    navEnd.subscribe(() => this.loading = false);\n  }\n  /**\n   * Initialise the SDK and try to load the user when the app loads\n   */\n\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      /** ***************************************************************************\n       * SDK INTEGRATION POINT\n       * Summary: Configure the SDK\n       * ----------------------------------------------------------------------------\n       * Details: Below, you will see the following settings:\n       * - clientId: (OAuth2 only) this is the OAuth2 client you created in ForgeRock\n       * - redirectUri: (OAuth2 only) this is the URI/URL of this app too which the\n       *   OAuth flow will redirect\n       * - scope: (OAuth2 only) these are the OAuth scopes that you will request from\n       *   ForgeRock\n       * - serverConfig: this includes the baseUrl of your ForgeRock AM, should\n       *   include `/am/` at the end\n       * - realmPath: this is the realm you are wanting to use within ForgeRock\n       * - tree: The authentication journey/tree that you are wanting to use\n       *************************************************************************** */\n      Config.set({\n        clientId: environment.WEB_OAUTH_CLIENT,\n        redirectUri: environment.APP_URL,\n        scope: 'openid profile email',\n        serverConfig: {\n          baseUrl: environment.AM_URL,\n          timeout: 3000 // 90000 or less\n\n        },\n        realmPath: environment.REALM_PATH,\n        tree: environment.JOURNEY_LOGIN\n      });\n      /** *****************************************************************\n       * SDK INTEGRATION POINT\n       * Summary: Optional client-side route access validation\n       * ------------------------------------------------------------------\n       * Details: Here, you could just make sure tokens exist –\n       * TokenStorage.get() – or, validate tokens, renew expiry timers,\n       * session checks ... Below, we are calling the userinfo endpoint to\n       * ensure valid tokens before continuing, but it's optional.\n       ***************************************************************** */\n\n      try {\n        // Assume user is likely authenticated if there are tokens\n        const info = yield UserManager.getCurrentUser();\n        _this.userService.isAuthenticated = true;\n        _this.userService.info = info;\n      } catch (err) {\n        // User likely not authenticated\n        console.log(err);\n      }\n    })();\n  }\n\n}\n\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.Router));\n};\n\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 3,\n  vars: 1,\n  consts: [[\"id\", \"root\", 1, \"cstm_root\"], [\"class\", \"cstm_container_v-centered container-fluid d-flex align-items-center\", 4, \"ngIf\"], [1, \"cstm_container_v-centered\", \"container-fluid\", \"d-flex\", \"align-items-center\"], [1, \"w-100\"], [\"message\", \"Verifying access ...\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"router-outlet\");\n      i0.ɵɵtemplate(2, AppComponent_div_2_Template, 3, 0, \"div\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", ctx.loading);\n    }\n  },\n  directives: [i2.RouterOutlet, i3.NgIf, i4.LoadingComponent],\n  encapsulation: 2\n});","map":{"version":3,"sources":["/Users/david.adams/Checkouts/angular-sample-standalone/src/app/app.component.ts"],"names":["Config","UserManager","environment","NavigationCancel","NavigationEnd","NavigationError","NavigationStart","filter","i0","i1","i2","i3","i4","AppComponent_div_2_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","AppComponent","constructor","userService","router","title","loading","navStart","events","pipe","evt","navEnd","subscribe","ngOnInit","set","clientId","WEB_OAUTH_CLIENT","redirectUri","APP_URL","scope","serverConfig","baseUrl","AM_URL","timeout","realmPath","REALM_PATH","tree","JOURNEY_LOGIN","info","getCurrentUser","isAuthenticated","err","console","log","ɵfac","AppComponent_Factory","t","ɵɵdirectiveInject","UserService","Router","ɵcmp","ɵɵdefineComponent","type","selectors","decls","vars","consts","template","AppComponent_Template","ɵɵtemplate","ɵɵadvance","ɵɵproperty","directives","RouterOutlet","NgIf","LoadingComponent","encapsulation"],"mappings":"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","sourcesContent":["import { Config, UserManager } from '@forgerock/javascript-sdk';\nimport { environment } from '../environments/environment';\nimport { NavigationCancel, NavigationEnd, NavigationError, NavigationStart, } from '@angular/router';\nimport { filter } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/user.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"./utilities/loading/loading.component\";\nfunction AppComponent_div_2_Template(rf, ctx) { if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 2)(1, \"div\", 3);\n    i0.ɵɵelement(2, \"app-loading\", 4);\n    i0.ɵɵelementEnd()();\n} }\nexport class AppComponent {\n    constructor(userService, router) {\n        this.userService = userService;\n        this.title = 'angular-todo-prototype';\n        this.loading = false;\n        const navStart = router.events.pipe(filter((evt) => evt instanceof NavigationStart));\n        const navEnd = router.events.pipe(filter((evt) => evt instanceof NavigationEnd ||\n            evt instanceof NavigationCancel ||\n            evt instanceof NavigationError));\n        navStart.subscribe(() => (this.loading = true));\n        navEnd.subscribe(() => (this.loading = false));\n    }\n    /**\n     * Initialise the SDK and try to load the user when the app loads\n     */\n    async ngOnInit() {\n        /** ***************************************************************************\n         * SDK INTEGRATION POINT\n         * Summary: Configure the SDK\n         * ----------------------------------------------------------------------------\n         * Details: Below, you will see the following settings:\n         * - clientId: (OAuth2 only) this is the OAuth2 client you created in ForgeRock\n         * - redirectUri: (OAuth2 only) this is the URI/URL of this app too which the\n         *   OAuth flow will redirect\n         * - scope: (OAuth2 only) these are the OAuth scopes that you will request from\n         *   ForgeRock\n         * - serverConfig: this includes the baseUrl of your ForgeRock AM, should\n         *   include `/am/` at the end\n         * - realmPath: this is the realm you are wanting to use within ForgeRock\n         * - tree: The authentication journey/tree that you are wanting to use\n         *************************************************************************** */\n        Config.set({\n            clientId: environment.WEB_OAUTH_CLIENT,\n            redirectUri: environment.APP_URL,\n            scope: 'openid profile email',\n            serverConfig: {\n                baseUrl: environment.AM_URL,\n                timeout: 3000, // 90000 or less\n            },\n            realmPath: environment.REALM_PATH,\n            tree: environment.JOURNEY_LOGIN,\n        });\n        /** *****************************************************************\n         * SDK INTEGRATION POINT\n         * Summary: Optional client-side route access validation\n         * ------------------------------------------------------------------\n         * Details: Here, you could just make sure tokens exist –\n         * TokenStorage.get() – or, validate tokens, renew expiry timers,\n         * session checks ... Below, we are calling the userinfo endpoint to\n         * ensure valid tokens before continuing, but it's optional.\n         ***************************************************************** */\n        try {\n            // Assume user is likely authenticated if there are tokens\n            const info = await UserManager.getCurrentUser();\n            this.userService.isAuthenticated = true;\n            this.userService.info = info;\n        }\n        catch (err) {\n            // User likely not authenticated\n            console.log(err);\n        }\n    }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) { return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.UserService), i0.ɵɵdirectiveInject(i2.Router)); };\nAppComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: AppComponent, selectors: [[\"app-root\"]], decls: 3, vars: 1, consts: [[\"id\", \"root\", 1, \"cstm_root\"], [\"class\", \"cstm_container_v-centered container-fluid d-flex align-items-center\", 4, \"ngIf\"], [1, \"cstm_container_v-centered\", \"container-fluid\", \"d-flex\", \"align-items-center\"], [1, \"w-100\"], [\"message\", \"Verifying access ...\"]], template: function AppComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"router-outlet\");\n        i0.ɵɵtemplate(2, AppComponent_div_2_Template, 3, 0, \"div\", 1);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", ctx.loading);\n    } }, directives: [i2.RouterOutlet, i3.NgIf, i4.LoadingComponent], encapsulation: 2 });\n"]},"metadata":{},"sourceType":"module"}