{"ast":null,"code":"import _asyncToGenerator from \"/Users/david.adams/Checkouts/angular-sample-standalone/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TokenStorage, UserManager } from '@forgerock/javascript-sdk';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/user.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(userService, router) {\n    this.userService = userService;\n    this.router = router;\n  }\n  /**\n   * Extends CanActivate to protect selected routes from unauthenticated access\n   *\n   * @param next - Route that the user is trying to access\n   * @param state - Router state\n   * @returns Promise - Boolean or route to redirect the user to\n   */\n\n\n  canActivate(next, state) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const loginUrl = _this.router.parseUrl('/login');\n\n      try {\n        // Assume user is likely authenticated if there are tokens\n\n        /** *****************************************************************\n         * SDK INTEGRATION POINT\n         * Summary: Optional client-side route access validation\n         * ------------------------------------------------------------------\n         * Details: Here, we make sure tokens exist using TokenStorage.get()\n         * however there are other checks – validate tokens, session checks..\n         * In this case, we are calling the userinfo endpoint to\n         * ensure valid tokens before continuing, but it's optional.\n         ***************************************************************** */\n        const tokens = yield TokenStorage.get();\n        const info = yield UserManager.getCurrentUser();\n\n        if (tokens === undefined || info === undefined) {\n          return loginUrl;\n        }\n\n        return true;\n      } catch (err) {\n        // User likely not authenticated\n        console.log(err);\n        return loginUrl;\n      }\n    })();\n  }\n\n}\n\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.UserService), i0.ɵɵinject(i2.Router));\n};\n\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/david.adams/Checkouts/angular-sample-standalone/src/app/auth/auth.guard.ts"],"names":["TokenStorage","UserManager","i0","i1","i2","AuthGuard","constructor","userService","router","canActivate","next","state","loginUrl","parseUrl","tokens","get","info","getCurrentUser","undefined","err","console","log","ɵfac","AuthGuard_Factory","t","ɵɵinject","UserService","Router","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,YAAT,EAAuBC,WAAvB,QAA0C,2BAA1C;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,0BAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,OAAO,MAAMC,SAAN,CAAgB;AACnBC,EAAAA,WAAW,CAACC,WAAD,EAAcC,MAAd,EAAsB;AAC7B,SAAKD,WAAL,GAAmBA,WAAnB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACUC,EAAAA,WAAW,CAACC,IAAD,EAAOC,KAAP,EAAc;AAAA;;AAAA;AAC3B,YAAMC,QAAQ,GAAG,KAAI,CAACJ,MAAL,CAAYK,QAAZ,CAAqB,QAArB,CAAjB;;AACA,UAAI;AACA;;AACA;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY,cAAMC,MAAM,SAASd,YAAY,CAACe,GAAb,EAArB;AACA,cAAMC,IAAI,SAASf,WAAW,CAACgB,cAAZ,EAAnB;;AACA,YAAIH,MAAM,KAAKI,SAAX,IAAwBF,IAAI,KAAKE,SAArC,EAAgD;AAC5C,iBAAON,QAAP;AACH;;AACD,eAAO,IAAP;AACH,OAjBD,CAkBA,OAAOO,GAAP,EAAY;AACR;AACAC,QAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,eAAOP,QAAP;AACH;AAxB0B;AAyB9B;;AArCkB;;AAuCvBP,SAAS,CAACiB,IAAV,GAAiB,SAASC,iBAAT,CAA2BC,CAA3B,EAA8B;AAAE,SAAO,KAAKA,CAAC,IAAInB,SAAV,EAAqBH,EAAE,CAACuB,QAAH,CAAYtB,EAAE,CAACuB,WAAf,CAArB,EAAkDxB,EAAE,CAACuB,QAAH,CAAYrB,EAAE,CAACuB,MAAf,CAAlD,CAAP;AAAmF,CAApI;;AACAtB,SAAS,CAACuB,KAAV,GAAkB,aAAc1B,EAAE,CAAC2B,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEzB,SAAT;AAAoB0B,EAAAA,OAAO,EAAE1B,SAAS,CAACiB,IAAvC;AAA6CU,EAAAA,UAAU,EAAE;AAAzD,CAAtB,CAAhC","sourcesContent":["import { TokenStorage, UserManager } from '@forgerock/javascript-sdk';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/user.service\";\nimport * as i2 from \"@angular/router\";\nexport class AuthGuard {\n    constructor(userService, router) {\n        this.userService = userService;\n        this.router = router;\n    }\n    /**\n     * Extends CanActivate to protect selected routes from unauthenticated access\n     *\n     * @param next - Route that the user is trying to access\n     * @param state - Router state\n     * @returns Promise - Boolean or route to redirect the user to\n     */\n    async canActivate(next, state) {\n        const loginUrl = this.router.parseUrl('/login');\n        try {\n            // Assume user is likely authenticated if there are tokens\n            /** *****************************************************************\n             * SDK INTEGRATION POINT\n             * Summary: Optional client-side route access validation\n             * ------------------------------------------------------------------\n             * Details: Here, we make sure tokens exist using TokenStorage.get()\n             * however there are other checks – validate tokens, session checks..\n             * In this case, we are calling the userinfo endpoint to\n             * ensure valid tokens before continuing, but it's optional.\n             ***************************************************************** */\n            const tokens = await TokenStorage.get();\n            const info = await UserManager.getCurrentUser();\n            if (tokens === undefined || info === undefined) {\n                return loginUrl;\n            }\n            return true;\n        }\n        catch (err) {\n            // User likely not authenticated\n            console.log(err);\n            return loginUrl;\n        }\n    }\n}\nAuthGuard.ɵfac = function AuthGuard_Factory(t) { return new (t || AuthGuard)(i0.ɵɵinject(i1.UserService), i0.ɵɵinject(i2.Router)); };\nAuthGuard.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthGuard, factory: AuthGuard.ɵfac, providedIn: 'root' });\n"]},"metadata":{},"sourceType":"module"}