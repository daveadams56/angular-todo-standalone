{"ast":null,"code":"import _asyncToGenerator from \"/Users/david.adams/Checkouts/angular-sample-standalone/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*\n * angular-todo-prototype\n *\n * form.component.ts\n *\n * Copyright (c) 2021 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nimport { Component, Input } from '@angular/core';\nimport { environment } from '../../../../environments/environment';\nimport { CallbackType, FRAuth, StepType, TokenManager, UserManager } from '@forgerock/javascript-sdk';\n/**\n * Used to display a login / registration form to the user, with authentication callbacks dynamically rendered based on the tree / journey\n */\n\nlet FormComponent = class FormComponent {\n  constructor(router, userService, route) {\n    this.router = router;\n    this.userService = userService;\n    this.route = route;\n    /**\n     * If the form is currently being submitted we want to display a spinner on the submit button\n     */\n\n    this.submittingForm = false;\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    this.route.queryParams.subscribe( /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (params) {\n        if (params.code && params.state) {\n          // TODO make sure tree is correct on resume if it has been overridden by query param\n          const resume = yield FRAuth.resume(window.location.href);\n\n          _this.processStep(resume);\n        } else if (params.suspendedId && params.authIndexType && params.authIndexValue) {\n          _this.tree = params.authIndexValue;\n          const resume = yield FRAuth.next(undefined, {\n            query: {\n              suspendedId: params.suspendedId\n            }\n          });\n\n          _this.processStep(resume);\n        } else {\n          _this.setConfigForAction(_this.action);\n\n          _this.nextStep();\n        }\n      });\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n  }\n  /**\n   * Call AM with a previous step to get a new step\n   * @param step - The previous step that should contain the input for AM\n   */\n\n\n  nextStep(step) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      _this2.submittingForm = true;\n\n      try {\n        /** *********************************************************************\n         * SDK INTEGRATION POINT\n         * Summary: Call the SDK's next method to submit the current step.\n         * ----------------------------------------------------------------------\n         * Details: This calls the next method with the previous step, expecting\n         * the next step to be returned, or a success or failure.\n         ********************************************************************* */\n        const nextStep = yield FRAuth.next(step, {\n          tree: _this2.tree\n        });\n\n        _this2.processStep(nextStep);\n      } catch (err) {\n        console.log(err);\n      } finally {\n        _this2.submittingForm = false;\n      }\n    })();\n  }\n\n  processStep(step) {\n    /** *******************************************************************\n     * SDK INTEGRATION POINT\n     * Summary: Handle step based on step type\n     * --------------------------------------------------------------------\n     * Details: Determine whether the step is a login failure, success or\n     * next step in the authentication journey, and handle appropriately.\n     ******************************************************************* */\n    switch (step.type) {\n      case StepType.LoginFailure:\n        this.handleFailure(step);\n        break;\n\n      case StepType.LoginSuccess:\n        this.handleSuccess(step);\n        break;\n\n      case StepType.Step:\n        this.handleStep(step);\n        break;\n\n      default:\n        this.handleFailure();\n    }\n  }\n\n  handleFailure(failure) {\n    this.failure = failure;\n  }\n  /**\n   * If the user authenticates successfully, update the UI to show a spinner, get an access token save user info then navigate home\n   * @param success - The step representing authentication success\n   */\n\n\n  handleSuccess(success) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      _this3.success = success;\n\n      if (_this3.userService.goto) {\n        window.location.href = _this3.userService.goto;\n      } else {\n        try {\n          /** *********************************************************************\n           * SDK INTEGRATION POINT\n           * Summary: Get OAuth/OIDC tokens with Authorization Code Flow w/PKCE.\n           * ----------------------------------------------------------------------\n           * Details: Since we have successfully authenticated the user, we can now\n           * get the OAuth2/OIDC tokens. We are passing the `forceRenew` option to\n           * ensure we get fresh tokens, regardless of existing tokens.\n           ************************************************************************* */\n          yield TokenManager.getTokens({\n            forceRenew: true\n          });\n          /** *********************************************************************\n           * SDK INTEGRATION POINT\n           * Summary: Call the user info endpoint for some basic user data.\n           * ----------------------------------------------------------------------\n           * Details: This is an OAuth2 call that returns user information with a\n           * valid access token. This is optional and only used for displaying\n           * user info in the UI.\n           ********************************************************************* */\n\n          const info = yield UserManager.getCurrentUser();\n          _this3.userService.info = info;\n          _this3.userService.isAuthenticated = true;\n\n          _this3.router.navigateByUrl('/');\n        } catch (err) {\n          console.error(err);\n        }\n      }\n    })();\n  }\n  /**\n   * Store the next step in the authentication journey and set configuration depending on the action type\n   * @param step - The next step in the journey\n   */\n\n\n  handleStep(step) {\n    this.step = step;\n    this.setConfigForAction(this.action);\n\n    if (step === null || step === void 0 ? void 0 : step.getHeader()) {\n      this.title = step === null || step === void 0 ? void 0 : step.getHeader();\n    }\n  }\n  /**\n   * Initialise configuration for the page based on whether this is a login or registration journey, or something else\n   * @param action - The type of action this form is being used for\n   */\n\n\n  setConfigForAction(action) {\n    var _this4 = this;\n\n    switch (action) {\n      case 'login':\n        {\n          this.title = 'Sign In';\n          this.buttonText = 'Sign In';\n          this.tree = environment.JOURNEY_LOGIN;\n          break;\n        }\n\n      case 'register':\n        {\n          this.title = 'Sign Up';\n          this.buttonText = 'Register', this.tree = environment.JOURNEY_REGISTER;\n          break;\n        }\n\n      default:\n        {\n          this.title = 'Welcome';\n          this.buttonText = 'Next';\n          this.tree = environment.JOURNEY_LOGIN;\n          break;\n        }\n    } // Override tree if supplied in query param\n\n\n    this.route.queryParams.subscribe( /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator(function* (params) {\n        if (params.tree) {\n          _this4.tree = params.tree;\n        }\n      });\n\n      return function (_x2) {\n        return _ref2.apply(this, arguments);\n      };\n    }());\n  }\n\n  shouldShowSubmitButton() {\n    var _a, _b, _c, _d, _e;\n\n    return ((_a = this.step) === null || _a === void 0 ? void 0 : _a.getCallbacksOfType(CallbackType.SuspendedTextOutputCallback).length) === 0 && ((_b = this.step) === null || _b === void 0 ? void 0 : _b.getCallbacksOfType(CallbackType.SelectIdPCallback).length) === 0 && ((_c = this.step) === null || _c === void 0 ? void 0 : _c.getCallbacksOfType(CallbackType.RedirectCallback).length) === 0 && ((_d = this.step) === null || _d === void 0 ? void 0 : _d.getCallbacksOfType(CallbackType.ConfirmationCallback).length) === 0 && ((_e = this.step) === null || _e === void 0 ? void 0 : _e.getCallbacksOfType(CallbackType.PollingWaitCallback).length) === 0;\n  }\n\n};\n\n__decorate([Input()], FormComponent.prototype, \"action\", void 0);\n\nFormComponent = __decorate([Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html'\n})], FormComponent);\nexport { FormComponent };","map":{"version":3,"sources":["/Users/david.adams/Checkouts/angular-sample-standalone/src/app/features/journey/form/form.component.ts"],"names":["__decorate","decorators","target","key","desc","c","arguments","length","r","Object","getOwnPropertyDescriptor","d","Reflect","decorate","i","defineProperty","Component","Input","environment","CallbackType","FRAuth","StepType","TokenManager","UserManager","FormComponent","constructor","router","userService","route","submittingForm","ngOnInit","queryParams","subscribe","params","code","state","resume","window","location","href","processStep","suspendedId","authIndexType","authIndexValue","tree","next","undefined","query","setConfigForAction","action","nextStep","step","err","console","log","type","LoginFailure","handleFailure","LoginSuccess","handleSuccess","Step","handleStep","failure","success","goto","getTokens","forceRenew","info","getCurrentUser","isAuthenticated","navigateByUrl","error","getHeader","title","buttonText","JOURNEY_LOGIN","JOURNEY_REGISTER","shouldShowSubmitButton","_a","_b","_c","_d","_e","getCallbacksOfType","SuspendedTextOutputCallback","SelectIdPCallback","RedirectCallback","ConfirmationCallback","PollingWaitCallback","prototype","selector","templateUrl"],"mappings":"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","sourcesContent":["/*\n * angular-todo-prototype\n *\n * form.component.ts\n *\n * Copyright (c) 2021 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component, Input } from '@angular/core';\nimport { environment } from '../../../../environments/environment';\nimport { CallbackType, FRAuth, StepType, TokenManager, UserManager, } from '@forgerock/javascript-sdk';\n/**\n * Used to display a login / registration form to the user, with authentication callbacks dynamically rendered based on the tree / journey\n */\nlet FormComponent = class FormComponent {\n    constructor(router, userService, route) {\n        this.router = router;\n        this.userService = userService;\n        this.route = route;\n        /**\n         * If the form is currently being submitted we want to display a spinner on the submit button\n         */\n        this.submittingForm = false;\n    }\n    ngOnInit() {\n        this.route.queryParams.subscribe(async (params) => {\n            if (params.code && params.state) {\n                // TODO make sure tree is correct on resume if it has been overridden by query param\n                const resume = await FRAuth.resume(window.location.href);\n                this.processStep(resume);\n            }\n            else if (params.suspendedId && params.authIndexType && params.authIndexValue) {\n                this.tree = params.authIndexValue;\n                const resume = await FRAuth.next(undefined, {\n                    query: { suspendedId: params.suspendedId },\n                });\n                this.processStep(resume);\n            }\n            else {\n                this.setConfigForAction(this.action);\n                this.nextStep();\n            }\n        });\n    }\n    /**\n     * Call AM with a previous step to get a new step\n     * @param step - The previous step that should contain the input for AM\n     */\n    async nextStep(step) {\n        this.submittingForm = true;\n        try {\n            /** *********************************************************************\n             * SDK INTEGRATION POINT\n             * Summary: Call the SDK's next method to submit the current step.\n             * ----------------------------------------------------------------------\n             * Details: This calls the next method with the previous step, expecting\n             * the next step to be returned, or a success or failure.\n             ********************************************************************* */\n            const nextStep = await FRAuth.next(step, { tree: this.tree });\n            this.processStep(nextStep);\n        }\n        catch (err) {\n            console.log(err);\n        }\n        finally {\n            this.submittingForm = false;\n        }\n    }\n    processStep(step) {\n        /** *******************************************************************\n         * SDK INTEGRATION POINT\n         * Summary: Handle step based on step type\n         * --------------------------------------------------------------------\n         * Details: Determine whether the step is a login failure, success or\n         * next step in the authentication journey, and handle appropriately.\n         ******************************************************************* */\n        switch (step.type) {\n            case StepType.LoginFailure:\n                this.handleFailure(step);\n                break;\n            case StepType.LoginSuccess:\n                this.handleSuccess(step);\n                break;\n            case StepType.Step:\n                this.handleStep(step);\n                break;\n            default:\n                this.handleFailure();\n        }\n    }\n    handleFailure(failure) {\n        this.failure = failure;\n    }\n    /**\n     * If the user authenticates successfully, update the UI to show a spinner, get an access token save user info then navigate home\n     * @param success - The step representing authentication success\n     */\n    async handleSuccess(success) {\n        this.success = success;\n        if (this.userService.goto) {\n            window.location.href = this.userService.goto;\n        }\n        else {\n            try {\n                /** *********************************************************************\n                 * SDK INTEGRATION POINT\n                 * Summary: Get OAuth/OIDC tokens with Authorization Code Flow w/PKCE.\n                 * ----------------------------------------------------------------------\n                 * Details: Since we have successfully authenticated the user, we can now\n                 * get the OAuth2/OIDC tokens. We are passing the `forceRenew` option to\n                 * ensure we get fresh tokens, regardless of existing tokens.\n                 ************************************************************************* */\n                await TokenManager.getTokens({ forceRenew: true });\n                /** *********************************************************************\n                 * SDK INTEGRATION POINT\n                 * Summary: Call the user info endpoint for some basic user data.\n                 * ----------------------------------------------------------------------\n                 * Details: This is an OAuth2 call that returns user information with a\n                 * valid access token. This is optional and only used for displaying\n                 * user info in the UI.\n                 ********************************************************************* */\n                const info = await UserManager.getCurrentUser();\n                this.userService.info = info;\n                this.userService.isAuthenticated = true;\n                this.router.navigateByUrl('/');\n            }\n            catch (err) {\n                console.error(err);\n            }\n        }\n    }\n    /**\n     * Store the next step in the authentication journey and set configuration depending on the action type\n     * @param step - The next step in the journey\n     */\n    handleStep(step) {\n        this.step = step;\n        this.setConfigForAction(this.action);\n        if (step === null || step === void 0 ? void 0 : step.getHeader()) {\n            this.title = step === null || step === void 0 ? void 0 : step.getHeader();\n        }\n    }\n    /**\n     * Initialise configuration for the page based on whether this is a login or registration journey, or something else\n     * @param action - The type of action this form is being used for\n     */\n    setConfigForAction(action) {\n        switch (action) {\n            case 'login': {\n                this.title = 'Sign In';\n                this.buttonText = 'Sign In';\n                this.tree = environment.JOURNEY_LOGIN;\n                break;\n            }\n            case 'register': {\n                this.title = 'Sign Up';\n                (this.buttonText = 'Register'), (this.tree = environment.JOURNEY_REGISTER);\n                break;\n            }\n            default: {\n                this.title = 'Welcome';\n                this.buttonText = 'Next';\n                this.tree = environment.JOURNEY_LOGIN;\n                break;\n            }\n        }\n        // Override tree if supplied in query param\n        this.route.queryParams.subscribe(async (params) => {\n            if (params.tree) {\n                this.tree = params.tree;\n            }\n        });\n    }\n    shouldShowSubmitButton() {\n        var _a, _b, _c, _d, _e;\n        return (((_a = this.step) === null || _a === void 0 ? void 0 : _a.getCallbacksOfType(CallbackType.SuspendedTextOutputCallback).length) === 0 &&\n            ((_b = this.step) === null || _b === void 0 ? void 0 : _b.getCallbacksOfType(CallbackType.SelectIdPCallback).length) === 0 &&\n            ((_c = this.step) === null || _c === void 0 ? void 0 : _c.getCallbacksOfType(CallbackType.RedirectCallback).length) === 0 &&\n            ((_d = this.step) === null || _d === void 0 ? void 0 : _d.getCallbacksOfType(CallbackType.ConfirmationCallback).length) === 0 &&\n            ((_e = this.step) === null || _e === void 0 ? void 0 : _e.getCallbacksOfType(CallbackType.PollingWaitCallback).length) === 0);\n    }\n};\n__decorate([\n    Input()\n], FormComponent.prototype, \"action\", void 0);\nFormComponent = __decorate([\n    Component({\n        selector: 'app-form',\n        templateUrl: './form.component.html',\n    })\n], FormComponent);\nexport { FormComponent };\n"]},"metadata":{},"sourceType":"module"}