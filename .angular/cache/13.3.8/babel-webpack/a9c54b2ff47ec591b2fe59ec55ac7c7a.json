{"ast":null,"code":"import _asyncToGenerator from \"/Users/david.adams/Checkouts/angular-sample-standalone/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*\n * angular-todo-prototype\n *\n * device-profile.component.ts\n *\n * Copyright (c) 2021 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\nimport { EventEmitter } from '@angular/core';\nimport { FRDevice } from '@forgerock/javascript-sdk';\nimport * as i0 from \"@angular/core\";\n/**\n * Used to collect and return the profile of a user's device\n */\n\nexport class DeviceProfileComponent {\n  constructor() {\n    /**\n     * Emits the data collected from the device profiling\n     */\n    this.updatedCallback = new EventEmitter();\n  }\n  /**\n   * Initiate the device profiling\n   */\n\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      var _a, _b, _c, _d;\n\n      const device = new FRDevice();\n      const profile = yield device.getProfile({\n        location: (_b = (_a = _this.callback) === null || _a === void 0 ? void 0 : _a.isLocationRequired()) !== null && _b !== void 0 ? _b : false,\n        metadata: (_d = (_c = _this.callback) === null || _c === void 0 ? void 0 : _c.isMetadataRequired()) !== null && _d !== void 0 ? _d : false\n      });\n\n      _this.updateValue(profile);\n    })();\n  }\n  /**\n   * Emit an event to the parent component, passing the device profile collected\n   * @param event - the value of the device profile\n   */\n\n\n  updateValue(event) {\n    this.updatedCallback.emit(event);\n  }\n\n}\n\nDeviceProfileComponent.ɵfac = function DeviceProfileComponent_Factory(t) {\n  return new (t || DeviceProfileComponent)();\n};\n\nDeviceProfileComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: DeviceProfileComponent,\n  selectors: [[\"app-device-profile\"]],\n  inputs: {\n    callback: \"callback\",\n    name: \"name\"\n  },\n  outputs: {\n    updatedCallback: \"updatedCallback\"\n  },\n  decls: 2,\n  vars: 1,\n  consts: [[1, \"cstm_form-floating\", \"form-floating\", \"mb-3\"], [3, \"message\"]],\n  template: function DeviceProfileComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"app-loading\", 1);\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"message\", \"Checking your device ...\");\n    }\n  },\n  encapsulation: 2\n});","map":{"version":3,"sources":["/Users/david.adams/Checkouts/angular-sample-standalone/src/app/features/journey/device-profile/device-profile.component.ts"],"names":["EventEmitter","FRDevice","i0","DeviceProfileComponent","constructor","updatedCallback","ngOnInit","_a","_b","_c","_d","device","profile","getProfile","location","callback","isLocationRequired","metadata","isMetadataRequired","updateValue","event","emit","ɵfac","DeviceProfileComponent_Factory","t","ɵcmp","ɵɵdefineComponent","type","selectors","inputs","name","outputs","decls","vars","consts","template","DeviceProfileComponent_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd","ɵɵadvance","ɵɵproperty","encapsulation"],"mappings":"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","sourcesContent":["/*\n * angular-todo-prototype\n *\n * device-profile.component.ts\n *\n * Copyright (c) 2021 ForgeRock. All rights reserved.\n * This software may be modified and distributed under the terms\n * of the MIT license. See the LICENSE file for details.\n */\nimport { EventEmitter } from '@angular/core';\nimport { FRDevice } from '@forgerock/javascript-sdk';\nimport * as i0 from \"@angular/core\";\n/**\n * Used to collect and return the profile of a user's device\n */\nexport class DeviceProfileComponent {\n    constructor() {\n        /**\n         * Emits the data collected from the device profiling\n         */\n        this.updatedCallback = new EventEmitter();\n    }\n    /**\n     * Initiate the device profiling\n     */\n    async ngOnInit() {\n        var _a, _b, _c, _d;\n        const device = new FRDevice();\n        const profile = await device.getProfile({\n            location: (_b = (_a = this.callback) === null || _a === void 0 ? void 0 : _a.isLocationRequired()) !== null && _b !== void 0 ? _b : false,\n            metadata: (_d = (_c = this.callback) === null || _c === void 0 ? void 0 : _c.isMetadataRequired()) !== null && _d !== void 0 ? _d : false,\n        });\n        this.updateValue(profile);\n    }\n    /**\n     * Emit an event to the parent component, passing the device profile collected\n     * @param event - the value of the device profile\n     */\n    updateValue(event) {\n        this.updatedCallback.emit(event);\n    }\n}\nDeviceProfileComponent.ɵfac = function DeviceProfileComponent_Factory(t) { return new (t || DeviceProfileComponent)(); };\nDeviceProfileComponent.ɵcmp = /*@__PURE__*/ i0.ɵɵdefineComponent({ type: DeviceProfileComponent, selectors: [[\"app-device-profile\"]], inputs: { callback: \"callback\", name: \"name\" }, outputs: { updatedCallback: \"updatedCallback\" }, decls: 2, vars: 1, consts: [[1, \"cstm_form-floating\", \"form-floating\", \"mb-3\"], [3, \"message\"]], template: function DeviceProfileComponent_Template(rf, ctx) { if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵelement(1, \"app-loading\", 1);\n        i0.ɵɵelementEnd();\n    } if (rf & 2) {\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"message\", \"Checking your device ...\");\n    } }, encapsulation: 2 });\n"]},"metadata":{},"sourceType":"module"}